{"version":3,"sources":["database.ts","scores.ts","server.ts"],"names":["DATA_DIR","FILENAME","db","Database","create","list","makeScore","obj","created_at","value","player","prepare","run","insertScore","req","res","body","status","send","message","score","_a","listScores","_","all","bodyParser","scores","VERSION","console","log","app","use","json","post","get","listener","listen","address","port"],"mappings":";;;;;;;AAAA,AEAA;QDWgBI,SAAAA;ICXJqB,IDgCIpB,OAAAA;;AD/BhB,ACDA,ACCA;;;;AFCA,AEAA,IFAIL,WAAW,SAAf;AACA,IAAIC,WAAW,WAAf;AACA,ACHA,IDGI,ACHAK,ACCQoB,CFEP,WCHW,SDGA1B,ACHZM,QDGC,CAAL,ACHgB,CAAUC,CDGC,ECHX,EAAe;ADI3B,ACHA,QAAI,OAAOA,IAAIC,IDGLR,MCHN,EDGJ,GCH8B,QAA1B,IACA,OAAOO,IAAIE,KAAX,KAAqB,QADrB,IAEA,OAAOF,IAAIG,MAAX,KAAsB,QAF1B,EAEoC;ADEvC,ACDO,eAAOH,GAAP;ADER,ACDK,IDCDL,KAAK,IAAIC,sBAAJ,CAAaH,WAAW,GAAX,GAAiBC,QAA9B,CAAT;ACAI,WAAO,IAAP,GDCWC;ACAd,CAPD;AAQAA,ACNA,IAAIyB,UAAU,IAAd,CDMGhB,OAAH,CAAW,8KAAX,EAA2LC,GAA3L;AACA,ACNAgB,IDMIf,ICNIgB,GAAR,CAAY,MDMM3B,ICNlB,eDMqBS,OAAH,CAAW,iGAAX,CAAlB,EAAiI;AAC1H,ACNP,IAAImB,KDMY1B,CCNN,KDMH,CAAgBU,GAAhB,EAAqBC,GAArB,EAA0B,QCNjC;ADOI,ACNJe,IAAIC,GAAJ,CDMQ,ACNAN,CDMCX,IAAIE,IAAT,EAAe,ACNAgB,IAAX,EAAR;ADOQ,ACNRF,IAAIG,IAAJ,CAAS,MDMMlB,ACNAY,IDMIV,GCNV,GDMM,ACNU,CDMC,GAAX,EAAgBC,GCN/B,CDMe,CAAqB,ACNAQ,OAAOtB,MAA3C;ADOYe,ACNZW,IAAII,GAAJ,CAAQ,MAAMP,ODMO,ACNb,GAAgB,SAAxB,EAAmCD,OAAOrB,IAA1C;ADKoC,ACJpC,IAAI8B,KDIW,CAAP,KCJOL,IAAIM,MAAJ,YAA6B,YAAY;ADOnD,ACNDR,YAAQC,GAAR,CAAY,8BAA8BM,SAASE,OAAT,GAAmBC,IAA7D;ADOA,ACNH,CAFc,CAAf,MDQQlB,QAAQd,UAAUQ,IAAIE,IAAd,CAAZ;AACA,QAAI,CAACI,KAAL,EAAY;AACR,eAAOL,IAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH;AACD,QAAI;AACAN,oBAAYD,GAAZ,CAAgBQ,KAAhB;AACH,KAFD,CAGA,OAAOC,EAAP,EAAW;AACP,eAAON,IAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACH;AACD,WAAOH,IAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACH;AACD,IAAII,aAAapB,mBAAGS,OAAH,CAAW,4BAAX,CAAjB;AACO,SAASN,IAAT,CAAckB,CAAd,EAAiBR,GAAjB,EAAsB;AACzB,QAAI;AACA,eAAOA,IAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,WAAWE,GAAX,EAArB,CAAP;AACH,KAFD,CAGA,OAAOH,EAAP,EAAW;AACP,eAAON,IAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACH;AACJ","file":"server.map","sourceRoot":"../src","sourcesContent":["import Database from 'better-sqlite3';\nimport { existsSync, mkdirSync } from 'fs';\nvar DATA_DIR = './.data';\nvar FILENAME = 'sqlite.db';\nif (!existsSync(DATA_DIR)) {\n    mkdirSync(DATA_DIR);\n}\nvar db = new Database(DATA_DIR + \"/\" + FILENAME);\nexport default db;\n","import db from './database';\nvar makeScore = function (obj) {\n    if (typeof obj.created_at === 'number' &&\n        typeof obj.value === 'number' &&\n        typeof obj.player === 'string') {\n        return obj;\n    }\n    return null;\n};\ndb.prepare(\"\\n  CREATE TABLE IF NOT EXISTS scores (\\n    player      varchar,\\n    value       integer,\\n    created_at  timestamp NOT NULL,\\n    PRIMARY KEY (player, created_at)\\n  );\").run();\nvar insertScore = db.prepare(\"\\n  INSERT INTO scores (player, value, created_at)\\n    VALUES (@player, @value, @created_at)\\n\"); // in postgres we would do `to_timestamp(@created_at)`\nexport function create(req, res) {\n    if (!req.body) {\n        return res.status(400).send({\n            message: \"Body can't be empty.\",\n        });\n    }\n    var score = makeScore(req.body);\n    if (!score) {\n        return res.status(400).send({\n            message: 'Body is not a Score.',\n        });\n    }\n    try {\n        insertScore.run(score);\n    }\n    catch (_a) {\n        return res.status(500).send();\n    }\n    return res.status(200).send();\n}\nvar listScores = db.prepare(\"\\n  SELECT * FROM scores\\n\");\nexport function list(_, res) {\n    try {\n        return res.status(200).send(listScores.all());\n    }\n    catch (_a) {\n        return res.status(500).send();\n    }\n}\n","import * as bodyParser from 'body-parser';\nimport express from 'express';\nimport * as scores from './scores';\nvar VERSION = 'v1';\nconsole.log('Running.');\nvar app = express();\napp.use(bodyParser.json());\napp.post(\"/\" + VERSION + \"/scores\", scores.create);\napp.get(\"/\" + VERSION + \"/scores\", scores.list);\nvar listener = app.listen(process.env.PORT, function () {\n    console.log(\"Your app is listening on \" + listener.address().port);\n});\n"]}